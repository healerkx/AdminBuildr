<script>
    $class('FieldPropertyDialog', null, {

        _domNode: null,

        _tr: null,

        setTitle: function(title) {
            this._domNode.find('div.modal-header span.field-name').text(title);
        },

        showDialog: function(tr, e) {
            this._tr = tr;
            var context = collectFieldConfig(tr);

            var _thisDialog = this;
            var callback = function() {
                if (_thisDialog.save()) {
                    this.hide();
                }
            };

            var h = this.template;
            var href = '#' + h.replace('/', '_');
            var target = $(href && href.replace(/.*(?=#[^\s]+$)/, '')); //strip for ie7
            this._domNode = target;
            this.setTitle(context.fieldName);
            var option = $.extend({ remote: !/#/.test(href) && href }, {'onOk': callback});
            e && e.preventDefault();

            //this.initVisible(context, target);
            target.modal(option);
            return target;
        },
        /*
        initVisible: function (context, domNode) {
            var r = domNode;
            if (context.fieldMode == 'primaryKey') {
                selectOneValueOnly(r.find('td[field=hide_in_create] select'), 1);
                selectOneValueOnly(r.find('td[field=hide_in_update] select'), 1);
            }
        },*/

        getVisibility: function() {
            var tr = this._domNode.find('tr.visible');
            // console.log(tr);
            var hideInList = tr.find('td[field=hide_in_list] select').val();
            var hideInCreate = tr.find('td[field=hide_in_create] select').val();
            var hideInUpdate = tr.find('td[field=hide_in_update] select').val();
            var hideInDetail = tr.find('td[field=hide_in_detail] select').val();
            var search = tr.find('td[field=search] select').val();
            return {
                hideInList:hideInList,
                hideInCreate:hideInCreate,
                hideInUpdate:hideInUpdate,
                hideInDetail:hideInDetail,
                search:search
            };
        },

        saveValue: function() {
            var v = this.getVisibility(), p = this.getProperties();
            var more = $.extend(v, p);
            this._tr.data('more', more);
            return more;
        }
    });

    // Derived classes
    // ---------------
    $class('TextDialog', FieldPropertyDialog, {

        template:'abmodule/dialog-text',

        show: function (context, e) {
            // TODO: fill data into dom.
            this.showDialog(context, e);
        },

        // TODO: Same code refactor
        getProperties: function () {
            var regionTable = this._domNode.find('table.text');
            var values = {};
            regionTable.find("input, select").each(function() {
                var i = $(this);
                var value = i.val(), name = i.attr('name');
                if (!String.isEmpty(value)) {
                    values[name] = value;
                }
            });
            console.log(values);
            return values;
        },

        save: function () {
            return this.saveValue();
        }
    });

    $class('SelectDialog', FieldPropertyDialog, {

        template:'abmodule/dialog-select',

        show: function (context, e) {
            // TODO: fill data into dom.
            var list = Widget.widgetById('entry-edit-list');
            console.log(list);
            if (list) {
                list.init();
                list.resetBody();
            }
            this.showDialog(context, e);
        },

        getProperties: function () {
            var trList = this._domNode.find('div[widget-class] tbody tr');
            var values = [];
            trList.each(function() {
                var tr = $(this);
                var value = tr.find('input.value').val(), name = tr.find('input.name').val();
                values.push({'value': value, 'name': name });
            });
            return {values: values};
        },

        save: function () {
            return this.saveValue();
        }
    });

    $class('RelatedIdDialog', FieldPropertyDialog, {
        template:'abmodule/dialog-fk',

        show: function (context, e) {
            // TODO: fill data into dom.
            var this_= this;
            var domNode = this.showDialog(context, e);
            var $select = domNode.find('.field-names');
            domNode.find('.table-name').change(function() {
                var tableName = $(this).val();
                $.post("/abmodule/info",
                        { table:tableName },
                        function(data){
                            var data = data.toJson();
                            if (data.error == 0) {
                                fillTableFields($select, data.data.fields);
                            }
                        });
            });
        },

        getProperties: function () {
            var tableName = this._domNode.find('.table-name').val();
            var fieldName = this._domNode.find('.field-names').val();

            return {'table':tableName, 'field':fieldName};

        },

        save: function () {
            return this.saveValue();
        }
    });


    $class('RegionDialog', FieldPropertyDialog, {
        template:'abmodule/dialog-region',

        show: function (context, e) {
            // TODO: fill data into dom.
            var domNode = this.showDialog(context, e);
            console.log(1, domNode.find('select.region-type'));
            domNode.find('select.region-type').change(function(){
                console.log(1);
                if ($(this).val() == 'province') {
                    domNode.find('input.group-name').css('display', '');
                } else {
                    domNode.find('input.group-name').css('display', 'none');
                }
            });
        },

        getProperties: function () {
            var regionTable = this._domNode.find('table.region');
            var values = {};
            regionTable.find("input, select").each(function() {
                var i = $(this);
                var value = i.val(), name = i.attr('name');
                if (!String.isEmpty(value)) {
                    values[name] = value;
                }

            });
            console.log(values);
            return values;
        },

        save: function () {
            return this.saveValue();
        }
    });

    $class('FileDialog', FieldPropertyDialog, {
        template:'abmodule/dialog-file',

        show: function (context, e) {
            // TODO: fill data into dom.
            var domNode = this.showDialog(context, e);
        },

        getProperties: function () {
            var uploadUrl = this._domNode.find('select[name=upload_path]').val();
            console.log(uploadUrl);
            return {upload_url: uploadUrl};
        },

        save: function () {
            return this.saveValue();
        }
    });

    $class('ImageDialog', FieldPropertyDialog, {
        template:'abmodule/dialog-img',

        show: function (context, e) {
            // TODO: fill data into dom.
            var domNode = this.showDialog(context, e);
        },

        getProperties: function () {
            var uploadUrl = this._domNode.find('select[name=upload_path]').val();
            return {upload_url: uploadUrl};
        },

        save: function () {
            return this.saveValue();
        }
    });


    $class('RelatedExtendDialog', FieldPropertyDialog, {
        template:'abmodule/dialog-extend',

        show: function (context, e) {
            // TODO: fill data into dom.
            var this_= this;
            var domNode = this.showDialog(context, e);
            var $select = domNode.find('.field-names');
            /*
            domNode.find('.table-name').change(function() {
                var tableName = $(this).val();
                $.post("/abmodule/info",
                        { table:tableName },
                        function(data){
                            var data = data.toJson();
                            if (data.error == 0) {
                                fillTableFields($select, data.data.fields);
                            }
                        });
            });
            */
        },

        getProperties: function () {
            var tableName = this._domNode.find('.table-name').val();
            var fieldName = this._domNode.find('.field-names').val();

        },

        save: function () {
            return this.saveValue();
        }
    });

    $class('PrimaryKeyDialog', FieldPropertyDialog, {
        template:'abmodule/dialog-pk',

        show: function (context, e) {
            var domNode = this.showDialog(context, e);
            selectOneValueOnly(domNode.find('td[field=hide_in_create] select'), 1);
            selectOneValueOnly(domNode.find('td[field=hide_in_update] select'), 1);
        },

        getProperties: function () {
            return {};
        },

        save: function () {
            return this.saveValue();
        }
    });


    $class('DateTimeDialog', FieldPropertyDialog, {
        template:'abmodule/dialog-datetime',

        show: function (context, e) {
            var domNode = this.showDialog(context, e);
            selectOneValueOnly(domNode.find('td[field=search] select'), 3);
        },

        getProperties: function () {
            return {};
        },

        save: function () {
            return this.saveValue();
        }
    });




</script>