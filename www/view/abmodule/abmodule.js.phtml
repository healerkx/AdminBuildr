<style>
    .modal.fade.in {
        top: 50%;
    }
</style>
<script>

    function navigateToPreviewTab(data) {
        console.log(data)

        $('#test_list_url').attr('href', data['test_list_url']);

        var filesTab = $('table.file-preview tbody');
        var template = $('#files_template');
        var files = data.files;
        for (var i in data.files) {
            var file = files[i];
            var line = $(template).clone().css('display', '');
            line.find('td span').text(file);
            line.appendTo(filesTab)
        }
        $('a[href="#preview"]').click();
    }

    function selectOneValueOnly(sel, val) {
        sel.val(val).attr('disabled', 'disabled');
    }

    function addFieldInfoRow(fi) {
        var t = $('#fields_action_row_template');

        var tbody = $('#fields_action_table tbody');
        var r = t.clone();

        var fieldName = fi['Field'];
        var fieldType = fi['Type'];
        var fieldComment = fi['Comment'];
        r.attr('field', fieldName).css('display', '').removeAttr('id');
        r.find('td[field=field] span.field_name').text(fieldName);
        r.find('td[field=field] span.field_type').text(fieldType);
        r.find('td[field=field_text] input').val(fieldComment);
        r.find('td[field=field_type] span').text(fieldType);
        r.find('td[field=field_name] span').text(fi['Field']);

        // PrimaryKey handling
        if (fi['Key'] == 'PRI') {
            var modeSelect = r.find('td[field=field_mode] select');
            modeSelect.append('<option value="primaryKey">主键ID</option>')

            selectOneValueOnly(modeSelect, 'primaryKey');
            //selectOneValueOnly(r.find('td[field=hide_in_create] select'), 1);
            //selectOneValueOnly(r.find('td[field=hide_in_update] select'), 1);
        }

        r.appendTo(tbody);
    }

    function initFieldsConfigList(data) {
        var tbody = $('#fields_action_table tbody');
        tbody.empty();
        var fields = data.fields;
        for (var i in fields) {
            var fi = fields[i];
            // console.log(fields[i]);
            addFieldInfoRow(fi);
        }
    }

    function fillTableFields($select, fields) {
        console.log(fields)
        $select.empty();
        var template = '<option value="{field_name}">{field_name}&nbsp;&nbsp;{field_type}</option>'
        var fieldNameList = [];
        for (var i in fields) {
            var fi = fields[i];
            var fieldName = fi['Field'];
            var fieldType = fi['Type'];
            fieldNameList.push(fieldName);

            var o = template.format({field_name: fieldName, field_type: fieldType});
            $(o).appendTo($select);
        }
    }

    function initFieldNameLists(data) {
        var fields = data.fields;
        var commitFieldSelect = $('#commit_field_select');
        var deleteFieldSelect = $('#delete_field_select');

        fillTableFields(commitFieldSelect, fields);
        fillTableFields(deleteFieldSelect, fields);
    }

    function collectFieldConfig(tr) {
        var fieldName = tr.find('td[field=field] span.field_name').text();
        var fieldMode = tr.find('td[field=field_mode] select').val();
        var fieldText = tr.find('td[field=field_text] input').val();

        var o = {
            fieldName: fieldName,
            fieldMode: fieldMode,
            fieldText: fieldText
        };
        console.log(o);
        return o;
    }

    function collectFieldsConfig() {
        var title = $('#module_title').val();
        var info = {
            Title: title,
            FieldsConfig:[],
            CommitSupport:{},
            DeleteSupport:{}};
        var trs = $('#fields_action_table tbody tr');

        trs.each(function(index, tr){
            var tr = $(tr);
            var o = collectFieldConfig(tr);
            if (o['fieldMode'] == 'primaryKey') {
                info['PrimaryKey'] = o['fieldName'];
            }
            info['FieldsConfig'].push(o)
        });

        var commitSupportChecked = $('#commit_support').attr('checked');
        info['CommitSupport'].support = 'No';
        if (commitSupportChecked == 'checked') {
            info['CommitSupport'].support = 'Yes';
            info['CommitSupport'].field = $('#commit_field_select').val();
            info['CommitSupport'].value = $('#commit_field_value').val();
        }

        var deleteSupportChecked = $('#delete_support').attr('checked');
        info['DeleteSupport'].support = 'No';
        if (deleteSupportChecked == 'checked') {
            info['DeleteSupport'].support = 'Yes';
            info['DeleteSupport'].field = $('#delete_field_select').val();
            info['DeleteSupport'].value = $('#delete_field_value').val();
        }

        return info;
    }


    $(function(){
        //FormComponents.init();

        $.getJSON('/abmodule/tableNames', function (data) {
            if (data.error == 0) {
                var tableNameSelect = $('#table_name');
                var a = data.data;
                for (var i in a) {
                    var tabName = a[i]['Tables_in_badmin'];

                    var template = "<option value=\"{table_name}\">{table_name}</option>".format({table_name:tabName});
                    var t = $(template).clone();
                    t.appendTo(tableNameSelect);
                }
            }
        });


        $('#load-model-button').click(function(){
            var tableName = $('#table_name').val();
            $.post("/abmodule/info",
                {
                    table:tableName, model:""
                },
                function(data){
                    // console.log(typeof(data));
                    var data = data.toJson();
                    if (data.error == 0) {
                        initFieldsConfigList(data.data);
                        initFieldNameLists(data.data);
                    }
                });
        });

        $('#preview-button').click(function(){
            var info = collectFieldsConfig();
            var prefix = $('#model_prefix').val();
            var tableName = $('#table_name').val();

            $.post("/abmodule/preview",
                {
                    prefix: prefix,
                    table_name: tableName,
                    info: info,
                },
                function(data) {
                    var data = data.toJson();
                    if (data.error == 0) {
                        navigateToPreviewTab(data.data);
                    }
                });
            return false;
        });


        $('#fields_action_table').delegate('.more', 'click', function(e){

            var a = $(this);
            var tr = a.parent().parent();
            var o = collectFieldConfig(tr);


            if (o.fieldMode == 'text' || o.fieldMode == 'number') {
                var d = new TextDialog();
            } else if (o.fieldMode == 'enum') {
                var d = new SelectDialog();
            } else if (o.fieldMode == 'fk') {
                var d = new RelatedIdDialog();
            } else if (o.fieldMode == 'region') {
                var d = new RegionDialog();
            } else {
                var d = new TextDialog();
            }
            d.show(o, e);
        });

    });
</script>
